{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["withAuthRedirect","WrappedComponent","connect","mapStateToPropsForRedirect","props","isAuth","restProps","to","state","auth","module","exports","DialogItem","name","id","className","s","dialog","src","alt","Message","message","massage","Dialogs","React","memo","dialogsPage","sendMessageAC","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","AddMessageFormRedux","onSubmit","values","newMessageBody","maxLength30","maxLengthCreater","AddMessageForm","handleSubmit","Field","component","Textarea","placeholder","validate","required","reduxForm","form","compose","dispatch"],"mappings":"gNA+BO,SAASA,EAAsBC,GAclC,OAJqCC,YACjCC,EAA4B,GADKD,EARiC,SAACE,GACnE,IAAKC,EAAwBD,EAAxBC,OAAWC,EAAhB,YAA6BF,EAA7B,GAEA,OAAKC,EAEE,cAACJ,EAAD,eAAsBK,IAFT,cAAC,IAAD,CAAUC,GAAG,cAYzC,IAAIJ,EAA6B,SAACK,GAAD,MAA0B,CACvDH,OAAQG,EAAMC,KAAKJ,U,oBChDvBK,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,8HCqBrMC,EAZI,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,GAAuC,iBAC9D,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SAEI,eAAC,IAAD,CAASV,GAAI,YAAcO,EAA3B,UACI,qBAAKI,IAAK,iKAAkKC,IAAK,QAChLN,Q,cCDFO,EARC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,QAAyC,iBACvD,OAEI,qBAAKN,UAAWC,IAAEM,QAAlB,SAA4BD,K,6ECkB9BE,EAAUC,IAAMC,MAAK,YAAuE,IAArEC,EAAoE,EAApEA,YAAqBC,GAA+C,EAAvDtB,OAAuD,EAA/CsB,eAE1CC,GAFyF,iBAEvEF,EAAYG,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMC,GAAIiB,EAAEjB,SAChFkB,EAAmBN,EAAYO,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASb,QAASa,EAAEb,aAQ1E,OACI,sBAAKN,UAAWC,IAAEa,QAAlB,UACI,qBAAKd,UAAWC,IAAEmB,aAAlB,SACKP,IAEL,sBAAKb,UAAWC,IAAEiB,SAAlB,UACI,8BAAMD,IACP,8BACI,cAACI,EAAD,CAAqBC,SAbhB,SAACC,GACjBX,EAAcW,EAAOC,gBACrBD,EAAOC,eAAiB,kBAqB1BC,EAAcC,YAAiB,IAE/BC,EAAmElB,IAAMC,MAAK,SAACrB,GACjF,OACI,uBAAMiC,SAAUjC,EAAMuC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUjC,KAAM,iBAC3BkC,YAAa,qBAAsBC,SAAU,CAACC,IAAUT,OAEnE,8BACI,yDAMVJ,EAAsBc,YAA+B,CAACC,KAAM,wBAAtCD,CAAgER,GAM7EnB,I,wBCrCA6B,sBAA6BpD,IAAkBE,aA1BrC,SAACM,GACtB,MAAO,CACHkB,YAAalB,EAAMkB,YACnBrB,OAAQG,EAAMC,KAAKJ,WASA,SAACgD,GACxB,MAAO,CACH1B,cAAe,SAACY,GACZc,EAAS1B,YAAcY,SAWpBa,CAA+F7B","file":"static/js/6.ed78a49f.chunk.js","sourcesContent":["import React, {Component, ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {authReducerStateType} from \"../redux/auth-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n// export function  withAuthRedirect <T>(Component: ComponentType<T>) {\r\n//\r\n//     let RedirectComponent:FC<MapStateToPropsType> = (props) => {\r\n//\r\n//         let {isAuth, ...restProps} = props;\r\n//\r\n//             if (!isAuth) return <Redirect to={'/login'}/>\r\n//\r\n//\r\n//         return <Component {...restProps as T }/>\r\n//     }\r\n//\r\n//     return connect (mapStateToProps, {}) (RedirectComponent)\r\n//\r\n// }\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3UqfC\",\"dialogsItems\":\"Dialogs_dialogsItems__CapzW\",\"dialog\":\"Dialogs_dialog__gbIbT\",\"messages\":\"Dialogs_messages__2E0ft\",\"massage\":\"Dialogs_massage__3JWqc\",\"active\":\"Dialogs_active__1jYRJ\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\nconst DialogItem = ({name, id, ...props}: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n\r\n            <NavLink to={'/dialogs/' + id}>\r\n                <img src={'https://www.nj.com/resizer/zovGSasCaR41h_yUGYHXbVTQW2A=/1280x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'} alt={'wtf'}/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\nconst Message = ({message, ...props}: MessagePropsType) => {\r\n    return (\r\n\r\n        <div className={s.massage}>{message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreater, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport type dialogsPageType = {\r\n    dialogs: Array<dialogsType>\r\n    messages: Array<messagesType>\r\n}\r\nexport type dialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type messagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n    sendMessageAC: (newMessageBody: string) => void\r\n}\r\n\r\nconst Dialogs = React.memo(({dialogsPage, isAuth, sendMessageAC, ...props}: DialogsPropsType) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map( d => <DialogItem name={d.name} id={d.id}/> )\r\n    let messagesElements = dialogsPage.messages.map( m => <Message message={m.message}/> )\r\n\r\n\r\n    let addNewMessage = (values: MessageFormDataType) => {\r\n        sendMessageAC(values.newMessageBody);\r\n        values.newMessageBody = \" \";\r\n\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n               <div>\r\n                   <AddMessageFormRedux onSubmit={addNewMessage} />\r\n               </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength30 = maxLengthCreater(30);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = React.memo((props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'}\r\n                       placeholder={\"Enter your message\"} validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {InitialStateType, sendMessageAC,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs, {DialogsPropsType} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport store, {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps  = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n        sendMessageAC: (newMessageBody: string) => void,\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessageAC: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect (Dialogs);\r\n//\r\n// const DialogsContainerX = connect (mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n//\r\n// const ComposeDialogsContainer = compose (withAuthRedirect, connect (mapStateToProps, mapDispatchToProps)) (Dialogs);\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect, connect (mapStateToProps, mapDispatchToProps)) (Dialogs);"],"sourceRoot":""}