{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/gray-user.png","assets/images/uploadPhoto.png","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["withAuthRedirect","WrappedComponent","connect","mapStateToPropsForRedirect","props","isAuth","restProps","to","state","auth","module","exports","ProfileStatusWithHooks","React","memo","status","updateStatus","isOwner","useState","profileStatus","setProfileStatus","editMode","setEditMode","useEffect","className","s","editableStatus","span","onDoubleClick","update","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileData","profile","handleEditContacts","contactsKeysArr","style","margin","aboutMe","maxWidth","width","wordBreak","lookingForAJob","String","map","key","contacts","href","undefined","onClick","ProfileDataForm","setEdit","dispatch","useDispatch","contactsValues","forEach","formik","useFormik","initialValues","facebook","website","vk","twitter","instagram","youtube","github","mainLink","validate","values","errors","URL","toString","match","trim","console","log","length","onSubmit","err","i","push","updateProfile","formContacts","handleSubmit","htmlFor","id","name","handleChange","color","type","checked","ProfileInfo","avatar","updatePhoto","edit","Preloader","photo","photos","large","GrayUser","Object","keys","descriptionBlock","userName","fullName","src","alt","updateImg","uploadPhoto","accept","target","files","Post","message","likeCount","item","MyPosts","posts","addPost","postsElements","p","postBlock","AddNewPostFormRedux","newPostBody","maxLength10","maxLengthCreater","AddNewPostForm","Field","component","Textarea","placeholder","required","reduxForm","form","MyPostsContainer","profilePage","Profile","main","ProfileContainer","userId","Number","this","params","getStatus","getProfileData","newUserId","autorizedUserId","history","refreshProfile","prevProps","prevState","snapshot","Component","compose","withRouter","setUserProfile"],"mappings":"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","file":"static/js/4.75b21716.chunk.js","sourcesContent":["import React, {Component, ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {authReducerStateType} from \"../redux/auth-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n// export function  withAuthRedirect <T>(Component: ComponentType<T>) {\r\n//\r\n//     let RedirectComponent:FC<MapStateToPropsType> = (props) => {\r\n//\r\n//         let {isAuth, ...restProps} = props;\r\n//\r\n//             if (!isAuth) return <Redirect to={'/login'}/>\r\n//\r\n//\r\n//         return <Component {...restProps as T }/>\r\n//     }\r\n//\r\n//     return connect (mapStateToProps, {}) (RedirectComponent)\r\n//\r\n// }\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1tQuT\",\"userName\":\"ProfileInfo_userName__YE9xS\",\"photo\":\"ProfileInfo_photo__tbHHZ\",\"avatar\":\"ProfileInfo_avatar__1w2aR\",\"updateImg\":\"ProfileInfo_updateImg__1sp_y\",\"editableStatus\":\"ProfileInfo_editableStatus__8TbpA\",\"update\":\"ProfileInfo_update__3UpD8\",\"span\":\"ProfileInfo_span__2gc3t\",\"formContacts\":\"ProfileInfo_formContacts__1q-ZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3Bvaa\",\"posts\":\"MyPosts_posts__3VZBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__cvtHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Profile_main__2-AfX\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo(({status, updateStatus, isOwner, ...props}: ProfileStatusPropsType) => {\r\n\r\n    const [profileStatus, setProfileStatus] = useState<string>(status)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    useEffect( () => {\r\n\r\n        setProfileStatus(status)\r\n        }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(profileStatus);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return <div>\r\n\r\n            <div className={s.editableStatus}>\r\n                {isOwner && !editMode &&\r\n                    <div>\r\n                        <span className={s.span} onDoubleClick={activateEditMode}>{status || \"----\"}</span>\r\n                        <div className={s.update}>Double click to update status.</div>\r\n                    </div>\r\n                }\r\n                {isOwner && editMode &&\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={profileStatus}></input>\r\n                }\r\n                {!isOwner &&\r\n                    <span className={s.span}>{status || \"\"}</span>\r\n\r\n                }\r\n                    </div>\r\n        </div>\r\n\r\n})\r\n\r\nexport default ProfileStatusWithHooks;\r\n","export default __webpack_public_path__ + \"static/media/gray-user.6537f30a.png\";","export default __webpack_public_path__ + \"static/media/uploadPhoto.039d2e8c.png\";","import React from 'react';\r\nimport {ProfileResponseType} from \"../../../../api/api\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileResponseType,\r\n    isOwner: boolean,\r\n    handleEditContacts: () => void,\r\n    contactsKeysArr: Array<string>\r\n\r\n}\r\nconst ProfileData = ({profile, isOwner, handleEditContacts, contactsKeysArr}:ProfileDataType) => {\r\n    return (\r\n        <div style={{margin: '8px 0px 8px 0px'}}>\r\n            {profile.aboutMe && <div style={{maxWidth: '300px'}}>About Me: <p style={{margin: '4px 0px 4px 0px', width: '100%', wordBreak: \"break-all\"}}>{profile.aboutMe}</p></div>}\r\n            <div>Looking for a job: {profile.lookingForAJob ? String(profile.lookingForAJob) : \"false\"}</div>\r\n            <b>Contacts:</b>\r\n            {\r\n                contactsKeysArr.map(key => profile.contacts[key]\r\n                    ? (<div key={key}>{key}:<a href={profile.contacts[key]}>{profile.contacts[key]}</a></div>)\r\n                    : undefined)\r\n\r\n\r\n            }\r\n            {isOwner &&\r\n                <button onClick={handleEditContacts}>Edit</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import React from 'react'\r\nimport {ProfileResponseType} from \"../../../../api/api\";\r\nimport {TypedDispatch} from \"../../../../redux/redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {updateProfile} from \"../../../../redux/profile-reducer\";\r\nimport s from \"../ProfileInfo.module.scss\";\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileResponseType\r\n    setEdit: (value: boolean) => void\r\n    contactsKeysArr: Array<string>\r\n}\r\ninterface IObjectKeys {\r\n    [key: string]: string | boolean;\r\n}\r\n\r\nexport interface FormDataType extends IObjectKeys {\r\n    aboutMe: string,\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string,\r\n    lookingForAJob: boolean\r\n}\r\ntype contactsValuesType = {\r\n    [facebook: string]: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport const ProfileDataForm = ({profile, setEdit, contactsKeysArr}: ProfileDataFormType) => {\r\n    const dispatch: TypedDispatch = useDispatch();\r\n    let contactsValues = {} as contactsValuesType\r\n    contactsKeysArr.forEach(key => {contactsValues[key] = profile.contacts[key] ? profile.contacts[key] : ''} )\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            'aboutMe': profile?.aboutMe ? profile.aboutMe : '',\r\n            'lookingForAJob': profile?.lookingForAJob ? profile.lookingForAJob : false,\r\n            'facebook': profile.contacts.facebook ? profile.contacts.facebook : '',\r\n            'website': profile.contacts.website ? profile.contacts.website : '',\r\n            'vk': profile.contacts.vk ? profile.contacts.vk : '',\r\n            'twitter': profile.contacts.twitter ? profile.contacts.twitter : '',\r\n            'instagram': profile.contacts.instagram ? profile.contacts.instagram : '',\r\n            'youtube': profile.contacts.youtube ? profile.contacts.youtube : '',\r\n            'github': profile.contacts.github ? profile.contacts.github : '',\r\n            'mainLink': profile.contacts.mainLink ? profile.contacts.mainLink : '',\r\n            //contacts: contactsValues\r\n        } as FormDataType,\r\n\r\n        validate:(values) => {\r\n            const errors = {} as IObjectKeys\r\n            const URL = /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/\r\n            contactsKeysArr.forEach(key => {\r\n                if (typeof values[key] === \"string\") {\r\n                    const value = values[key].toString() as string\r\n                    if (value.match(URL) || (value.trim() === '')) {\r\n                        delete errors[key]\r\n                    } else {\r\n                        console.log(`valueError:!${values[key]}!`)\r\n                        errors[key] = 'incorrect URL adress'\r\n                    }\r\n                }\r\n            })\r\n            if (values.aboutMe.length > 201) {\r\n                errors.aboutMe = 'max number of symbols'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            const err = []\r\n            contactsKeysArr.forEach((key, i) => {\r\n                if (formik.errors[key]) {\r\n                    err[i] = key\r\n                }\r\n            })\r\n            if (formik.errors.aboutMe) {\r\n                err.push(formik.errors.aboutMe);\r\n            }\r\n            console.log('err' + err)\r\n            if (err.length) {\r\n                return\r\n            } else {\r\n                dispatch (updateProfile(formik.values))\r\n                        setEdit(false);\r\n            }\r\n\r\n        },\r\n    });\r\n    // console.log(`ddddddd:${(!!formik.errors)}!`)\r\n    console.log('Errors' + formik.errors);\r\n    return (\r\n        <form style={{margin: '8px 0px 8px 0px'}} className={s.formContacts} onSubmit={formik.handleSubmit}>\r\n            <div><label htmlFor=\"aboutMe\">About me</label>\r\n                <textarea\r\n                    id=\"aboutMe\"\r\n                    name=\"aboutMe\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.aboutMe}\r\n                />\r\n                {\r\n                    formik.errors.aboutMe && <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>\r\n                }\r\n            </div>\r\n            <div><label htmlFor=\"lookingForAJob\">lookingForAJob</label>\r\n                <input\r\n                    id=\"lookingForAJob\"\r\n                    name=\"lookingForAJob\"\r\n                    type=\"checkbox\"\r\n                    onChange={formik.handleChange}\r\n                    checked={formik.values.lookingForAJob}\r\n                /></div>\r\n            <b>Contacts:</b>\r\n            {contactsKeysArr.map(key => <div key={key}>\r\n                <label htmlFor={key}>{key}</label>\r\n                <input\r\n                    id={key}\r\n                    name={key}\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={String(formik.values[key])}\r\n                />\r\n                    {\r\n                        formik.errors[key] && <div style={{color: 'red'}}>{formik.errors[key]}</div>\r\n                    }\r\n            </div>\r\n            )\r\n\r\n            }\r\n            {/*<div><label htmlFor=\"github\">github</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"github\"*/}\r\n            {/*    name=\"github\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.github}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"mainLink\">mainLink</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"mainLink\"*/}\r\n            {/*    name=\"mainLink\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.mainLink}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"website\">website</label>*/}\r\n            {/*    <input*/}\r\n            {/*        id=\"website\"*/}\r\n            {/*        name=\"website\"*/}\r\n            {/*        type=\"text\"*/}\r\n            {/*        onChange={formik.handleChange}*/}\r\n            {/*        value={formik.values.website}*/}\r\n            {/*    /></div>*/}\r\n            {/*<div><label htmlFor=\"facebook\">facebook</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"facebook\"*/}\r\n            {/*    name=\"facebook\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.facebook}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"vk\">vk</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"vk\"*/}\r\n            {/*    name=\"vk\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.vk}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"twitter\">twitter</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"twitter\"*/}\r\n            {/*    name=\"twitter\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.twitter}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"instagram\">instagram</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"instagram\"*/}\r\n            {/*    name=\"instagram\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.instagram}*/}\r\n            {/*/></div>*/}\r\n            {/*<div><label htmlFor=\"youtube\">youtube</label>*/}\r\n            {/*<input*/}\r\n            {/*    id=\"youtube\"*/}\r\n            {/*    name=\"youtube\"*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    onChange={formik.handleChange}*/}\r\n            {/*    value={formik.values.youtube}*/}\r\n            {/*/></div>*/}\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n\r\n\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport GrayUser from '../../../assets/images/gray-user.png';\r\nimport {type} from \"os\";\r\nimport {ProfileResponseType} from \"../../../api/api\";\r\nimport {useFormik} from \"formik\";\r\nimport uploadPhoto from '../../../assets/images/uploadPhoto.png'\r\nimport {updateProfile} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TypedDispatch} from \"../../../redux/redux-store\";\r\nimport Profile from \"../Profile\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataForm} from \"./ProfileData/ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileResponseType,\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (image: object) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, updatePhoto, ...props}: ProfileInfoPropsType) => {\r\n\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const handleEditContacts = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    if(!profile)  {\r\n        return <Preloader />\r\n    }\r\n\r\n    let avatar\r\n    const photo = profile.photos.large;\r\n    if (photo) {\r\n\r\n        avatar = String(photo)\r\n    } else {\r\n        avatar = GrayUser\r\n    }\r\n\r\n    const addImage = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            updatePhoto(e.target.files[0])\r\n        }\r\n        else return\r\n    }\r\n\r\n    const contactsKeysArr = Object.keys(profile.contacts)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.userName}>{profile.fullName}</div>\r\n                <div className={s.photo}>\r\n                    <img className={s.avatar} src={avatar} alt={'(((((((('}/>\r\n                    {isOwner &&\r\n                        <div className={s.updateImg}>\r\n                            <label htmlFor=\"myfile\">\r\n                                <img src={uploadPhoto}/>\r\n                                <input type={'file'} accept=\"image/*\" onChange={addImage} id=\"myfile\" name=\"myfile\"/>\r\n                            </label>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n                {!edit ?\r\n                    <ProfileData profile={profile} isOwner={isOwner}\r\n                                 contactsKeysArr={contactsKeysArr} handleEditContacts={handleEditContacts}/>\r\n                    :\r\n                    <ProfileDataForm setEdit={setEdit} profile={profile} contactsKeysArr={contactsKeysArr}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default React.memo(ProfileInfo);","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nfunction Post ({message, likeCount, ...props}: PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://www.nj.com/resizer/zovGSasCaR41h_yUGYHXbVTQW2A=/1280x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'} alt={'wtf'} />\r\n            {message}\r\n            <div>\r\n                <span>likes</span>{likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Post);\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {InitialStatePostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreater, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<InitialStatePostType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst  MyPosts = React.memo(({posts, addPost, ...props}: MyPostsPropsType) => {\r\n\r\n    let postsElements = posts.map( p => <Post key={p.message} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n\r\n    const addNewPost = (values: addNewPostFormType) => {\r\n        // alert(values.newPostBody)\r\n        addPost(values.newPostBody);\r\n        values.newPostBody = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport type addNewPostFormType = {\r\n    newPostBody: string;\r\n}\r\n\r\nconst maxLength10 = maxLengthCreater(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<addNewPostFormType>> = React.memo((props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={\"newPostBody\"} placeholder={\"Enter your post\"}\r\n                    validate={[required, maxLength10]}\r\n            ></Field>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n})\r\n\r\nconst AddNewPostFormRedux = reduxForm<addNewPostFormType>({form: 'profileAddNewPostForm'}) (AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {\r\n    addPost,\r\n    InitialStatePostType,\r\n} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<InitialStatePostType>;\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPost(newPostBody))\r\n        }\r\n}}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect} from \"react\";\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileAPI, ProfileResponseType} from \"../../api/api\";\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport s from './Profile.module.scss'\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileResponseType,\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (image: object) => void\r\n}\r\n\r\nconst Profile = ({profile, status, updateStatus, isOwner, updatePhoto, ...props}: ProfilePropsType ) =>{\r\n\r\n\r\n    return (\r\n        <div className={s.main} >\r\n            <ProfileInfo updatePhoto={updatePhoto} isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo (Profile);","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileData,\r\n    getStatus,\r\n    setUserProfile, updatePhoto,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {ProfileResponseType} from \"../../api/api\";\r\n\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsProfileType & mapDispatchToPropsProfileType;\r\ntype CommonPropsType = RouteComponentProps<ParamsType> & ProfileContainerPropsType;\r\n\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile () {\r\n        let userId: number|null = Number(this.props.match.params.userId);\r\n        if (userId) {\r\n            this.props.getStatus(userId);\r\n            this.props.getProfileData(userId);\r\n        }\r\n        if (!userId) {\r\n            let newUserId = this.props.autorizedUserId;\r\n            this.props.getStatus(newUserId);\r\n            this.props.getProfileData(newUserId);\r\n            if (!newUserId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n    }\r\n    componentDidMount () {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        //debugger\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        console.log('renderProfileContainer')\r\n      return(\r\n          <Profile isOwner={!this.props.match.params.userId} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} updatePhoto={this.props.updatePhoto}/>\r\n      )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsProfileType = {\r\n    setUserProfile: (profile: any) => void\r\n    getProfileData: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    updatePhoto: (image: object) => void\r\n}\r\ntype mapStateToPropsProfileType = {\r\n    profile: ProfileResponseType,\r\n    status: string\r\n    autorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsProfileType  => {\r\n    return{\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n\r\n}\r\n\r\n// export default withRouter();\r\n// export default withRouter((connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType >\r\n// (mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus}))(ProfileContainer))\r\n\r\n// export default compose (\r\n//     withRouter,\r\n//     connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType >\r\n// (mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus})(ProfileContainer))\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, withAuthRedirect, connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType>(mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus, updatePhoto})\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}