{"version":3,"sources":["hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/gray-user.png","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["withAuthRedirect","WrappedComponent","connect","mapStateToPropsForRedirect","props","isAuth","restProps","to","state","auth","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusWithHooks","React","memo","status","updateStatus","useState","profileStatus","setProfileStatus","editMode","setEditMode","useEffect","className","s","editableStatus","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","ProfileInfo","avatar","profile","Preloader","photo","photos","large","String","GrayUser","descriptionBlock","src","alt","Post","message","likeCount","item","MyPosts","posts","addPost","postsElements","map","p","postBlock","AddNewPostFormRedux","onSubmit","values","newPostBody","maxLength10","maxLengthCreater","AddNewPostForm","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","reduxForm","form","MyPostsContainer","profilePage","dispatch","Profile","main","ProfileContainer","userId","Number","this","match","params","getStatus","getProfileData","newUserId","autorizedUserId","history","console","log","Component","compose","withRouter","id","setUserProfile"],"mappings":"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","file":"static/js/3.83e8f241.chunk.js","sourcesContent":["import React, {Component, ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {authReducerStateType} from \"../redux/auth-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n// export function  withAuthRedirect <T>(Component: ComponentType<T>) {\r\n//\r\n//     let RedirectComponent:FC<MapStateToPropsType> = (props) => {\r\n//\r\n//         let {isAuth, ...restProps} = props;\r\n//\r\n//             if (!isAuth) return <Redirect to={'/login'}/>\r\n//\r\n//\r\n//         return <Component {...restProps as T }/>\r\n//     }\r\n//\r\n//     return connect (mapStateToProps, {}) (RedirectComponent)\r\n//\r\n// }\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1tQuT\",\"avatar\":\"ProfileInfo_avatar__1w2aR\",\"editableStatus\":\"ProfileInfo_editableStatus__8TbpA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3Bvaa\",\"posts\":\"MyPosts_posts__3VZBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__cvtHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Profile_main__2-AfX\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = React.memo(({status, updateStatus, ...props}: ProfileStatusPropsType) => {\r\n\r\n    const [profileStatus, setProfileStatus] = useState<string>(status)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    useEffect( () => {\r\n\r\n        setProfileStatus(status)\r\n        }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(profileStatus);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return <div>\r\n            {!editMode &&\r\n            <div className={s.editableStatus}>\r\n                <span onDoubleClick={activateEditMode}>{status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div className={s.editableStatus}>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={profileStatus}></input>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n})\r\n\r\nexport default ProfileStatusWithHooks;\r\n","export default __webpack_public_path__ + \"static/media/gray-user.6537f30a.png\";","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport GrayUser from '../../../assets/images/gray-user.png';\r\nimport {type} from \"os\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, ...props}: ProfileInfoPropsType) => {\r\n    if(!profile)  {\r\n        return <Preloader />\r\n    }\r\n\r\n    let avatar\r\n    const photo = profile.photos.large;\r\n    if (photo) {\r\n\r\n        avatar = String(photo)\r\n    } else {\r\n        avatar = GrayUser\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.avatar} src={avatar} alt={'(((((((('}/>\r\n                {/*<div className={s.avatar} style={avatar}></div>*/}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(ProfileInfo);","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nfunction Post ({message, likeCount, ...props}: PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://www.nj.com/resizer/zovGSasCaR41h_yUGYHXbVTQW2A=/1280x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'} alt={'wtf'} />\r\n            {message}\r\n            <div>\r\n                <span>likes</span>{likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Post);\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {InitialStatePostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreater, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<InitialStatePostType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst  MyPosts = React.memo(({posts, addPost, ...props}: MyPostsPropsType) => {\r\n\r\n    let postsElements = posts.map( p => <Post key={p.message} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n\r\n    const addNewPost = (values: addNewPostFormType) => {\r\n        // alert(values.newPostBody)\r\n        addPost(values.newPostBody);\r\n        values.newPostBody = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport type addNewPostFormType = {\r\n    newPostBody: string;\r\n}\r\n\r\nconst maxLength10 = maxLengthCreater(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<addNewPostFormType>> = React.memo((props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={\"newPostBody\"} placeholder={\"Enter your post\"}\r\n                    validate={[required, maxLength10]}\r\n            ></Field>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n})\r\n\r\nconst AddNewPostFormRedux = reduxForm<addNewPostFormType>({form: 'profileAddNewPostForm'}) (AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {\r\n    addPost,\r\n    InitialStatePostType,\r\n} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<InitialStatePostType>;\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPost(newPostBody))\r\n        }\r\n}}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect} from \"react\";\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileAPI} from \"../../api/api\";\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport s from './Profile.module.scss'\r\n\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = ({profile, status, updateStatus, ...props}: ProfilePropsType ) =>{\r\n\r\n\r\n    return (\r\n        <div className={s.main} >\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo (Profile);","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileData,\r\n    getStatus,\r\n    setUserProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsProfileType & mapDispatchToPropsProfileType;\r\ntype CommonPropsType = RouteComponentProps<ParamsType> & ProfileContainerPropsType;\r\n\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n    componentDidMount () {\r\n        // debugger\r\n        let userId: number|null = Number(this.props.match.params.userId);\r\n        if (userId) {\r\n            this.props.getStatus(userId);\r\n            this.props.getProfileData(userId);\r\n        }\r\n        if (!userId) {\r\n            let newUserId = this.props.autorizedUserId;\r\n            this.props.getStatus(newUserId);\r\n            this.props.getProfileData(newUserId);\r\n            if (!newUserId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        console.log('renderProfileContainer')\r\n      return(\r\n          <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n      )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsProfileType = {\r\n    setUserProfile: (profile: any) => void\r\n    getProfileData: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype mapStateToPropsProfileType = {\r\n    profile: any\r\n    status: string\r\n    autorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsProfileType  => {\r\n    return{\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n\r\n}\r\n\r\n// export default withRouter();\r\n// export default withRouter((connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType >\r\n// (mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus}))(ProfileContainer))\r\n\r\n// export default compose (\r\n//     withRouter,\r\n//     connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType >\r\n// (mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus})(ProfileContainer))\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, withAuthRedirect, connect<mapStateToPropsProfileType, mapDispatchToPropsProfileType, {},AppStateType>(mapStateToProps, {setUserProfile, getProfileData, getStatus, updateStatus})\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}